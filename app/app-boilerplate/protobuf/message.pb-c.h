/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MessageGetVersion MessageGetVersion;
typedef struct _ResponseGetVersion ResponseGetVersion;
typedef struct _MessageGetPubKey MessageGetPubKey;
typedef struct _ResponseGetPubKey ResponseGetPubKey;
typedef struct _MessageSignTx MessageSignTx;
typedef struct _ResponseSignTx ResponseSignTx;
typedef struct _ResponseError ResponseError;
typedef struct _Message Message;
typedef struct _Response Response;


/* --- enums --- */


/* --- messages --- */

struct  _MessageGetVersion
{
  ProtobufCMessage base;
};
#define MESSAGE_GET_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_get_version__descriptor) \
     }


struct  _ResponseGetVersion
{
  ProtobufCMessage base;
  char *version;
};
#define RESPONSE_GET_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_get_version__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _MessageGetPubKey
{
  ProtobufCMessage base;
};
#define MESSAGE_GET_PUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_get_pub_key__descriptor) \
     }


struct  _ResponseGetPubKey
{
  ProtobufCMessage base;
  ProtobufCBinaryData pubkey;
};
#define RESPONSE_GET_PUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_get_pub_key__descriptor) \
    , {0,NULL} }


struct  _MessageSignTx
{
  ProtobufCMessage base;
  ProtobufCBinaryData tx;
};
#define MESSAGE_SIGN_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_sign_tx__descriptor) \
    , {0,NULL} }


struct  _ResponseSignTx
{
  ProtobufCMessage base;
  protobuf_c_boolean approved;
  /*
   * XXX: optional
   */
  ProtobufCBinaryData signature;
};
#define RESPONSE_SIGN_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_sign_tx__descriptor) \
    , 0, {0,NULL} }


struct  _ResponseError
{
  ProtobufCMessage base;
  char *error_msg;
};
#define RESPONSE_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_error__descriptor) \
    , (char *)protobuf_c_empty_string }


typedef enum {
  MESSAGE__MESSAGE_ONEOF__NOT_SET = 0,
  MESSAGE__MESSAGE_ONEOF_GET_VERSION = 1,
  MESSAGE__MESSAGE_ONEOF_GET_PUBKEY = 2,
  MESSAGE__MESSAGE_ONEOF_SIGN_TX = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE__MESSAGE_ONEOF)
} Message__MessageOneofCase;

struct  _Message
{
  ProtobufCMessage base;
  Message__MessageOneofCase message_oneof_case;
  union {
    MessageGetVersion *get_version;
    MessageGetPubKey *get_pubkey;
    MessageSignTx *sign_tx;
  };
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , MESSAGE__MESSAGE_ONEOF__NOT_SET, {0} }


typedef enum {
  RESPONSE__MESSAGE_ONEOF__NOT_SET = 0,
  RESPONSE__MESSAGE_ONEOF_GET_VERSION = 1,
  RESPONSE__MESSAGE_ONEOF_GET_PUBKEY = 2,
  RESPONSE__MESSAGE_ONEOF_SIGN_TX = 3,
  RESPONSE__MESSAGE_ONEOF_ERROR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESPONSE__MESSAGE_ONEOF)
} Response__MessageOneofCase;

struct  _Response
{
  ProtobufCMessage base;
  Response__MessageOneofCase message_oneof_case;
  union {
    ResponseGetVersion *get_version;
    ResponseGetPubKey *get_pubkey;
    ResponseSignTx *sign_tx;
    ResponseError *error;
  };
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , RESPONSE__MESSAGE_ONEOF__NOT_SET, {0} }


/* MessageGetVersion methods */
void   message_get_version__init
                     (MessageGetVersion         *message);
size_t message_get_version__get_packed_size
                     (const MessageGetVersion   *message);
size_t message_get_version__pack
                     (const MessageGetVersion   *message,
                      uint8_t             *out);
size_t message_get_version__pack_to_buffer
                     (const MessageGetVersion   *message,
                      ProtobufCBuffer     *buffer);
MessageGetVersion *
       message_get_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_get_version__free_unpacked
                     (MessageGetVersion *message,
                      ProtobufCAllocator *allocator);
/* ResponseGetVersion methods */
void   response_get_version__init
                     (ResponseGetVersion         *message);
size_t response_get_version__get_packed_size
                     (const ResponseGetVersion   *message);
size_t response_get_version__pack
                     (const ResponseGetVersion   *message,
                      uint8_t             *out);
size_t response_get_version__pack_to_buffer
                     (const ResponseGetVersion   *message,
                      ProtobufCBuffer     *buffer);
ResponseGetVersion *
       response_get_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_get_version__free_unpacked
                     (ResponseGetVersion *message,
                      ProtobufCAllocator *allocator);
/* MessageGetPubKey methods */
void   message_get_pub_key__init
                     (MessageGetPubKey         *message);
size_t message_get_pub_key__get_packed_size
                     (const MessageGetPubKey   *message);
size_t message_get_pub_key__pack
                     (const MessageGetPubKey   *message,
                      uint8_t             *out);
size_t message_get_pub_key__pack_to_buffer
                     (const MessageGetPubKey   *message,
                      ProtobufCBuffer     *buffer);
MessageGetPubKey *
       message_get_pub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_get_pub_key__free_unpacked
                     (MessageGetPubKey *message,
                      ProtobufCAllocator *allocator);
/* ResponseGetPubKey methods */
void   response_get_pub_key__init
                     (ResponseGetPubKey         *message);
size_t response_get_pub_key__get_packed_size
                     (const ResponseGetPubKey   *message);
size_t response_get_pub_key__pack
                     (const ResponseGetPubKey   *message,
                      uint8_t             *out);
size_t response_get_pub_key__pack_to_buffer
                     (const ResponseGetPubKey   *message,
                      ProtobufCBuffer     *buffer);
ResponseGetPubKey *
       response_get_pub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_get_pub_key__free_unpacked
                     (ResponseGetPubKey *message,
                      ProtobufCAllocator *allocator);
/* MessageSignTx methods */
void   message_sign_tx__init
                     (MessageSignTx         *message);
size_t message_sign_tx__get_packed_size
                     (const MessageSignTx   *message);
size_t message_sign_tx__pack
                     (const MessageSignTx   *message,
                      uint8_t             *out);
size_t message_sign_tx__pack_to_buffer
                     (const MessageSignTx   *message,
                      ProtobufCBuffer     *buffer);
MessageSignTx *
       message_sign_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_sign_tx__free_unpacked
                     (MessageSignTx *message,
                      ProtobufCAllocator *allocator);
/* ResponseSignTx methods */
void   response_sign_tx__init
                     (ResponseSignTx         *message);
size_t response_sign_tx__get_packed_size
                     (const ResponseSignTx   *message);
size_t response_sign_tx__pack
                     (const ResponseSignTx   *message,
                      uint8_t             *out);
size_t response_sign_tx__pack_to_buffer
                     (const ResponseSignTx   *message,
                      ProtobufCBuffer     *buffer);
ResponseSignTx *
       response_sign_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_sign_tx__free_unpacked
                     (ResponseSignTx *message,
                      ProtobufCAllocator *allocator);
/* ResponseError methods */
void   response_error__init
                     (ResponseError         *message);
size_t response_error__get_packed_size
                     (const ResponseError   *message);
size_t response_error__pack
                     (const ResponseError   *message,
                      uint8_t             *out);
size_t response_error__pack_to_buffer
                     (const ResponseError   *message,
                      ProtobufCBuffer     *buffer);
ResponseError *
       response_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_error__free_unpacked
                     (ResponseError *message,
                      ProtobufCAllocator *allocator);
/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MessageGetVersion_Closure)
                 (const MessageGetVersion *message,
                  void *closure_data);
typedef void (*ResponseGetVersion_Closure)
                 (const ResponseGetVersion *message,
                  void *closure_data);
typedef void (*MessageGetPubKey_Closure)
                 (const MessageGetPubKey *message,
                  void *closure_data);
typedef void (*ResponseGetPubKey_Closure)
                 (const ResponseGetPubKey *message,
                  void *closure_data);
typedef void (*MessageSignTx_Closure)
                 (const MessageSignTx *message,
                  void *closure_data);
typedef void (*ResponseSignTx_Closure)
                 (const ResponseSignTx *message,
                  void *closure_data);
typedef void (*ResponseError_Closure)
                 (const ResponseError *message,
                  void *closure_data);
typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor message_get_version__descriptor;
extern const ProtobufCMessageDescriptor response_get_version__descriptor;
extern const ProtobufCMessageDescriptor message_get_pub_key__descriptor;
extern const ProtobufCMessageDescriptor response_get_pub_key__descriptor;
extern const ProtobufCMessageDescriptor message_sign_tx__descriptor;
extern const ProtobufCMessageDescriptor response_sign_tx__descriptor;
extern const ProtobufCMessageDescriptor response_error__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
